{"version":3,"sources":["libs/cookies.js","App.jsx","serviceWorker.js","index.jsx"],"names":["getCookie","key","name","ca","decodeURIComponent","document","cookie","split","i","length","c","charAt","substring","indexOf","Sobre","lazy","Home","Login","Cadastro","Perfil","Compras","Compra","Cashback","PrivateRoute","Component","component","rest","render","props","to","pathname","state","from","location","App","fallback","exact","path","Boolean","window","hostname","match","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mGACA,kCAAO,IAOMA,EAAY,SAACC,GAIxB,IAHA,IAAIC,EAAOD,EAAM,IAEbE,EADgBC,mBAAmBC,SAASC,QACzBC,MAAM,KACrBC,EAAI,EAAGA,EAAGL,EAAGM,OAAQD,IAAK,CAEhC,IADA,IAAIE,EAAIP,EAAGK,GACY,MAAhBE,EAAEC,OAAO,IACdD,EAAIA,EAAEE,UAAU,GAElB,GAAwB,IAApBF,EAAEG,QAAQX,GACZ,OAAOQ,EAAEE,UAAUV,EAAKO,OAAQC,EAAED,QAGtC,MAAO,K,0MChBHK,EAAQC,gBAAK,kBAAM,uDACnBC,EAAOD,gBAAK,kBAAM,uDAClBE,EAAQF,gBAAK,kBAAM,uDACnBG,EAAWH,gBAAK,kBAAM,sDACtBI,EAASJ,gBAAK,kBAAM,uDACpBK,EAAUL,gBAAK,kBAAM,oEACrBM,EAASN,gBAAK,kBAAM,oEACpBO,EAAWP,gBAAK,kBAAM,6DAEtBQ,EAAe,SAAC,GAAD,IAAcC,EAAd,EAAGC,UAAyBC,EAA5B,oCACnB,kBAAC,IAAD,iBACMA,EADN,CAEEC,OAAQ,SAAAC,GAAK,OACX5B,YAAU,SACR,kBAACwB,EAAcI,GAEf,kBAAC,IAAD,CAAUC,GAAI,CAAEC,SAAU,SAAUC,MAAO,CAAEC,KAAMJ,EAAMK,kBA0BlDC,E,uKAlBX,OACE,kBAAC,WAAD,CAAUC,SAAU,+BAClB,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcC,OAAK,EAACC,KAAK,IAAIZ,UAAWT,IACxC,kBAAC,IAAD,CAAOoB,OAAK,EAACC,KAAK,SAASZ,UAAWX,IACtC,kBAAC,IAAD,CAAOsB,OAAK,EAACC,KAAK,SAASZ,UAAWR,IACtC,kBAAC,IAAD,CAAOmB,OAAK,EAACC,KAAK,YAAYZ,UAAWP,IACzC,kBAAC,EAAD,CAAckB,OAAK,EAACC,KAAK,UAAUZ,UAAWN,IAC9C,kBAAC,EAAD,CAAciB,OAAK,EAACC,KAAK,WAAWZ,UAAWL,IAC/C,kBAAC,EAAD,CAAcgB,OAAK,EAACC,KAAK,UAAUZ,UAAWJ,IAC9C,kBAAC,EAAD,CAAce,OAAK,EAACC,KAAK,cAAcZ,UAAWJ,IAClD,kBAAC,EAAD,CAAce,OAAK,EAACC,KAAK,YAAYZ,UAAWH,U,GAbxCE,aCfEc,QACW,cAA7BC,OAAON,SAASO,UAEe,UAA7BD,OAAON,SAASO,UAEhBD,OAAON,SAASO,SAASC,MACvB,2DCVNd,iBACE,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFtB,SAASqC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a2fac8e6.chunk.js","sourcesContent":["\nexport const setCookie = (key, value, expire_days=1) => {\n  let date = new Date();\n  date.setTime(date.getTime() + (1000 * 60 * 60 * 24 * expire_days));\n  let expires = 'expires=' + date.toUTCString();\n  document.cookie = key + ' = ' + value + ';' + expires + ';path=/';\n};\n\nexport const getCookie = (key) => {\n  let name = key + \"=\";\n  let decodedCookie = decodeURIComponent(document.cookie);\n  let ca = decodedCookie.split(';');\n  for(var i = 0; i <ca.length; i++) {\n    var c = ca[i];\n    while (c.charAt(0) === ' ') {\n      c = c.substring(1);\n    }\n    if (c.indexOf(name) === 0) {\n      return c.substring(name.length, c.length);\n    }\n  }\n  return \"\";\n};\n\nexport const removeCookie = (key) => {\n  document.cookie = key + ' = ; expires = Thu, 01 Jan 1970 00:00:00 GMT ;path=/';\n};\n","import React, { Component, Suspense, lazy } from 'react';\nimport { Route, Switch, Redirect } from 'react-router-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { getCookie } from './libs/cookies.js';\n\nconst Sobre = lazy(() => import('./pages/Sobre'));\nconst Home = lazy(() => import('./pages/Home'));\nconst Login = lazy(() => import('./pages/Login'));\nconst Cadastro = lazy(() => import('./pages/Cadastro'));\nconst Perfil = lazy(() => import('./pages/Perfil'));\nconst Compras = lazy(() => import('./pages/Compras'));\nconst Compra = lazy(() => import('./pages/Compra'));\nconst Cashback = lazy(() => import('./pages/Cashback'));\n\nconst PrivateRoute = ({ component: Component, ...rest }) => (\n  <Route\n    {...rest}\n    render={props =>\n      getCookie('token') ? (\n        <Component {...props} />\n      ) : (\n        <Redirect to={{ pathname: '/login', state: { from: props.location } }} />\n      )\n    }\n  />\n);\n\nclass App extends Component {\n  render() {\n    return (\n      <Suspense fallback={<div></div>}>\n        <Switch>\n          <PrivateRoute exact path='/' component={Home}/>\n          <Route exact path='/sobre' component={Sobre}/>\n          <Route exact path='/login' component={Login}/>\n          <Route exact path='/cadastro' component={Cadastro}/>\n          <PrivateRoute exact path='/perfil' component={Perfil}/>\n          <PrivateRoute exact path='/compras' component={Compras}/>\n          <PrivateRoute exact path='/compra' component={Compra}/>\n          <PrivateRoute exact path='/compra/:id' component={Compra}/>\n          <PrivateRoute exact path='/cashback' component={Cashback}/>\n        </Switch>\n      </Suspense>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport { render } from 'react-dom';\nimport { BrowserRouter } from 'react-router-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nrender(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}